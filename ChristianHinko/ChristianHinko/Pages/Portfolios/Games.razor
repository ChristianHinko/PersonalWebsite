@page "/games"
@using ChristianHinko.Shared.Components.Portfolio
@using ChristianHinko.Shared.Components.Video
@using ChristianHinko.Shared.Components.Portfolio.InfoChips

<!-- Title banner -->
<div class="relative mud-width-full" style="height: 600px; overflow: hidden;">
    <!-- Background video detached from the DOM -->
    <div class="absolute mud-width-full" style="z-index: -100; top: 50%; transform: translateY(-50%);"> <!-- vertically center ourselves -->
        <div style="filter: opacity(0.2);">
            <div class="mud-width-full" style="aspect-ratio: 16 / 9;"> <!-- wrap the video in a 16:9 block with full width -->
                <CHYoutubeVideoEmbed VideoId="G1oe6fWMTb8" />
            </div>
        </div>
    </div>
    <!-- Title text on top of the detached background -->
    <div class="relative mud-width-full mud-height-full d-flex flex-column justify-center align-center"> <!-- position has to be non-static in order to draw on top of the non-static-positioned background -->
        <header>
            <MudText Class="ch-header-text" Typo="@Typo.h1" Align="@Align.Center">
                Games
            </MudText>
        </header>
        <MudButton Href="/games/resume" Target="_blank" DisableElevation="true" Variant="@Variant.Outlined">
            <MudText Typo="@Typo.body1">
                Résumé
            </MudText>
        </MudButton>
    </div>
</div>
<!-- Content -->
<MudContainer MaxWidth="@MaxWidth.Large">
    <CHPortfolioSection Title="Professional Experience" />
    <CHPortfolioProjectStack>
        <CHPortfolioProjectCard Id="engineer-at-dreamlit-games" Title="Engineer at Dreamlit Games">
            <Info>
                <CHInfoChip_GameStudio Value="Dreamlit" />
                <CHInfoChip_DateRange DateFrom="June, 2023" DateTo="Present" />
            </Info>
            <Media>
                <CHAspectRatioFitBlock Class="mud-width-full mud-height-full" FitHeight="false">
                    <CHYoutubeVideoEmbed VideoId="4vQzZMrSnMM" Start="81" Link="true" />
                </CHAspectRatioFitBlock>
            </Media>
            <References>
                <CHIconButtonLink Href="https://www.dreamlit.games" Icon="@Icons.Material.Filled.Link" Text="Dreamlit Games" />
            </References>
        </CHPortfolioProjectCard>
        <CHPortfolioProjectCard Id="mesh-tree-to-skeletal-mesh-tool" Title="Mesh Tree To Skeletal Mesh Tool">
            <Info>
                <CHInfoChip_GameStudio Value="Dreamlit" />
                <CHInfoChip_GameTitle Value="Towers of Aghasba" />
                <CHInfoChip_TeamSize Value="1" />
                <CHInfoChip_DevelopmentTime Value="3 Months" />
            </Info>
            <Media>
                <CHAspectRatioFitBlock Class="mud-width-full mud-height-full" FitHeight="false">
                    <CHYoutubeVideoEmbed VideoId="4vQzZMrSnMM" Start="81" Link="true" />
                </CHAspectRatioFitBlock>
            </Media>
            <Description>
                <MudText Typo="@Typo.body1">
                    Editor tool that generates skeletal mesh assets along with anim sequences for the Colossal Trees in Towers of Aghasba.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    This tool merges a hierarchy of static mesh components into a single skeletal mesh asset, ready for animation. Appends mesh descriptions together and minimizes material slots by sharing them where possible. Generates skin weights and registers them as skeletal mesh attributes to the appropriate vertices. Unskinned bones can be generated from empty scene components in the mesh hierarchy.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The tool also generates anim sequences, used for the visual of trees growing to higher tiers. The mesh hierarchy that was used to generate the skeleton asset is the one chosen as the rest pose. Other mesh hierarchies must have compatible naming for the tool to associate their bones with the rest pose's. The user can then create their of sequence of keyframes using these mesh hierarchies.
                </MudText>
            </Description>
            <References>
                <CHIconButtonLink Href="https://www.dreamlit.games" Icon="@Icons.Material.Filled.Link" Text="Dreamlit Games" />
            </References>
        </CHPortfolioProjectCard>
    </CHPortfolioProjectStack>
    <CHPortfolioSection Title="Projects" />
    <CHPortfolioProjectStack>
        <CHPortfolioProjectCard Id="animation-setup" Title="Animation Setup">
            <Info>
                <CHInfoChip_TeamSize Value="1" />
                <CHInfoChip_DevelopmentTime Value="7 Months" />
                <CHInfoChip_ProjectStatus Value="In Development" />
            </Info>
            <Media>
                <CHAspectRatioFitBlock Class="mud-width-full mud-height-full" FitHeight="false">
                    <CHYoutubeVideoEmbed VideoId="PIclUQwI5Fs" Link="true" />
                </CHAspectRatioFitBlock>
            </Media>
            <Description>
                <MudText Typo="@Typo.body1">
                    The Animation Setup plugin provides tools for modular character assembly and common mesh setup.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The skinless Skeletal Mesh system generates an animated skeleton that serves as the foundation for modular attachments. This separation of responsibilities allows skeletal animation to be independent of Skeletal Meshes.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The portrayal system creates a workflow for representing an Actor Component in unique ways for different viewers. Portrayals are implemented via a PortrayalDefinition and are identified by Gameplay Tag. Actors can associate their different components with different portrayal tags.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The NinjaGame project implements a first-person portrayal that the Character views when in first-person; meanwhile, other Actors see the default portrayal.
                </MudText>
            </Description>
            <References>
                <CHIconButtonLink Href="https://github.com/ChristianHinko/AnimationSetup" Icon="@Icons.Custom.Brands.GitHub" Text="Source Available on GitHub" />
            </References>
            <Details>
                <CHDetailsBlock Title="Contributions">
                    <MudText Typo="@Typo.body1">
                        <CHTextBullet IndentationLevel="1" />Make skinless Skeletal Mesh generation functionality for creating animated skeletons
                    </MudText>
                    <MudText Typo="@Typo.body1">
                        <CHTextBullet IndentationLevel="1" />Make PortrayalDefinition for defining how viewers are included and excluded from viewing
                    </MudText>
                    <MudText Typo="@Typo.body1">
                        <CHTextBullet IndentationLevel="1" />Make ObjectReferenceLibrary subsystem for identifying PortrayalDefinitions by Gameplay Tag
                    </MudText>
                    <MudText Typo="@Typo.body1">
                        <CHTextBullet IndentationLevel="1" />Make general-purpose Primitive Scene Proxy implementations
                    </MudText>
                </CHDetailsBlock>
            </Details>
        </CHPortfolioProjectCard>
        <CHPortfolioProjectCard Id="custom-collision-queries" Title="Custom Collision Queries">
            <Info>
                <CHInfoChip_TeamSize Value="2" />
                <CHInfoChip_DevelopmentTime Value="2 Months" />
                <CHInfoChip_ProjectStatus Value="Finished" />
            </Info>
            <Media>
                <CHAspectRatioFitBlock Class="mud-width-full mud-height-full" FitHeight="false">
                    <CHYoutubeVideoEmbed VideoId="WQ95migPNMc" Link="true" />
                </CHAspectRatioFitBlock>
            </Media>
            <Description>
                <MudText Typo="@Typo.body1">
                    These custom collision query functions are made using a layered approach where each one implements its own feature and builds off of others.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    These queries combined give us exit hits, can penetrate blocking hits, can ricochet, and can run out of strength. This is a powerful query that is useful for complex shooting systems in games.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The ShooterTest game project uses this and has bullet damage determined by the query strength. ShooterTest also uses physical materials to determine how much strength to nerf and which surfaces are ricochetable.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    All collision queries are generic to both line traces and shape sweeps.
                </MudText>
            </Description>
            <References>
                <CHIconButtonLink Href="https://github.com/b2hinkle/GameCore/tree/master/Source/GameCore/Public/BlueprintFunctionLibraries/CollisionQuery" Icon="@Icons.Custom.Brands.GitHub" Text="Source Available on GitHub" />
            </References>
            <Details>
                <CHDetailsBlock Title="Contributions">
                    <MudText Typo="@Typo.body1">
                        <CHTextBullet IndentationLevel="1" />Make method for penetrating any hit while preserving the desired hit responses
                    </MudText>
                    <MudText Typo="@Typo.body1">
                        <CHTextBullet IndentationLevel="1" />Make function for modifying Hit Result trace data
                    </MudText>
                    <MudText Typo="@Typo.body1">
                        <CHTextBullet IndentationLevel="1" />Optimize backwards query distance required for exit hits, reducing up to 50% of function time
                    </MudText>
                    <MudText Typo="@Typo.body1">
                        <CHTextBullet IndentationLevel="1" />Develop function for ordering entrance and exit Hit Results to the query's forwards direction
                    </MudText>
                    <MudText Typo="@Typo.body1">
                        <CHTextBullet IndentationLevel="1" />Develop query that can lose strength based on distances between entrance and exit Hit Results
                    </MudText>
                </CHDetailsBlock>
            </Details>
        </CHPortfolioProjectCard>
        <CHPortfolioProjectCard Id="ability-system-setup" Title="Ability System Setup">
            <Info>
                <CHInfoChip_TeamSize Value="2" />
                <CHInfoChip_DevelopmentTime Value="2 Years" />
                <CHInfoChip_ProjectStatus Value="Finished" />
            </Info>
            <Media>
                <CHAspectRatioFitBlock Class="mud-width-full mud-height-full" FitHeight="false">
                    <CHYoutubeVideoEmbed VideoId="lKwUsJqkRJ4" Link="true" />
                </CHAspectRatioFitBlock>
            </Media>
            <Description>
                <MudText Typo="@Typo.body1">
                    This plugin is an extension of Epic Games' Gameplay Ability System offering an efficient workflow that eliminates boilerplate code and improves scalability.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    This plugin provides a setup for Avatar Actors, a better workflow for Gameplay Ability input binding, and many other tools to aid in using the ability system.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The AvatarActorExtension component initializes and uninitializes an Avatar Actor when provided with an Ability System Component and optional AbilitySets. It is agnostic to Ability System Component location and supports Avatar Actors of any type.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    For Pawns, the more specialized PawnAvatarActorExtension component provides additional logic for ability input binding. This makes a complete in-editor workflow for associating Gameplay Abilities with Input Actions via Gameplay Tags.
                </MudText>
            </Description>
            <References>
                <CHIconButtonLink Href="https://github.com/ChristianHinko/AbilitySystemSetup" Icon="@Icons.Custom.Brands.GitHub" Text="Source Available on GitHub" />
            </References>
            <Details>
                <CHDetailsBlock Title="Contributions">
                    <MudText Typo="@Typo.body1">
                        <CHTextBullet IndentationLevel="1" />Develop common initialization and uninitialization for Ability System Component with Avatar Actor
                    </MudText>
                    <MudText Typo="@Typo.body1">
                        <CHTextBullet IndentationLevel="1" />Develop Gameplay Tag workflow for associating Input Actions with Gameplay Abilities
                    </MudText>
                    <MudText Typo="@Typo.body1">
                        <CHTextBullet IndentationLevel="1" />Make granting and removing of Ability Sets
                    </MudText>
                    <MudText Typo="@Typo.body1">
                        <CHTextBullet IndentationLevel="1" />Make a way to reuse Target Actors through several Ability Task usages
                    </MudText>
                    <MudText Typo="@Typo.body1">
                        <CHTextBullet IndentationLevel="1" />Make custom Gameplay Target Data Filters
                    </MudText>
                </CHDetailsBlock>
            </Details>
        </CHPortfolioProjectCard>
        <CHPortfolioProjectCard Id="input-setup" Title="Input Setup">
            <Info>
                <CHInfoChip_TeamSize Value="2" />
                <CHInfoChip_DevelopmentTime Value="1 Month" />
                <CHInfoChip_ProjectStatus Value="Finished" />
            </Info>
            <Media>
                <CHAspectRatioFitBlock Class="mud-width-full mud-height-full" FitHeight="false">
                    <CHYoutubeVideoEmbed VideoId="EvwQgOc_Jrs" Link="true" />
                </CHAspectRatioFitBlock>
            </Media>
            <Description>
                <MudText Typo="@Typo.body1">
                    The Input Setup plugin is a central place where all Input Actions in the game can be accessed from.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    Input Action references are stored on an Engine Subsystem and identifiable by Gameplay Tags, allowing different game systems to use the same Input Actions without creating duplicate references.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The game project can add Input Actions to the subsystem via project settings. External plugins are able to contribute via a Data Asset that is loaded by the subsystem. Contributions from dynamically-loaded plugins, e.g., Game Features, are supported.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The Ability System Setup plugin uses this subsystem to execute input events for relevant Gameplay Abilities of the Input Actions.
                </MudText>
            </Description>
            <References>
                <CHIconButtonLink Href="https://github.com/ChristianHinko/InputSetup" Icon="@Icons.Custom.Brands.GitHub" Text="Source Available on GitHub" />
            </References>
            <Details>
                <CHDetailsBlock Title="Contributions">
                    <MudText Typo="@Typo.body1">
                        <CHTextBullet IndentationLevel="1" />Develop subsystem gathering Input Action references from game project and dynamic plugins
                    </MudText>
                </CHDetailsBlock>
            </Details>
        </CHPortfolioProjectCard>
        <CHPortfolioProjectCard Id="property-wrapper" Title="Property Wrapper">
            <Info>
                <CHInfoChip_TeamSize Value="2" />
                <CHInfoChip_DevelopmentTime Value="16 Months" />
                <CHInfoChip_ProjectStatus Value="Finished" />
            </Info>
            <Media>
                <CHAspectRatioFitBlock Class="mud-width-full mud-height-full" FitHeight="false">
                    <CHYoutubeVideoEmbed VideoId="OTe3qDAHrFY" Link="true" />
                </CHAspectRatioFitBlock>
            </Media>
            <Description>
                <MudText Typo="@Typo.body1">
                    The property wrapper offers an event that gets broadcasted when the property's value has been changed.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The property wrapper streamlines workflows such as marking the value dirty for Push Model replication and updating gameplay based on value changes.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The property wrapper's functionality is generic to any type. It is implemented as a lightweight USTRUCT with most functionality in a base class and boilerplate code in a macro.
                </MudText>
            </Description>
            <References>
                <CHIconButtonLink Href="https://github.com/b2hinkle/GameCore/tree/master/Source/GameCore/Public/Types/PropertyWrappers" Icon="@Icons.Custom.Brands.GitHub" Text="Source Available on GitHub" />
            </References>
            <Details>
                <CHDetailsBlock Title="Contributions">
                    <MudText Typo="@Typo.body1">
                        <CHTextBullet IndentationLevel="1" />Design FGCPropertyWrapperBase base class and GC_PROPERTY_WRAPPER_CHILD_BODY() macro
                    </MudText>
                    <MudText Typo="@Typo.body1">
                        <CHTextBullet IndentationLevel="1" />Develop usage of FProperty pointers for Push Model replication and generic serialization
                    </MudText>
                </CHDetailsBlock>
            </Details>
        </CHPortfolioProjectCard>
    </CHPortfolioProjectStack>
    <CHPortfolioSection Title="My Story" />
    <MudText Typo="@Typo.body1" Align="@Align.Center">
        Hi! My name is Christian Hinkle, a multiplayer game systems programmer.
    </MudText>
    <MudText Typo="@Typo.body1" Align="@Align.Center">
        <br>
    </MudText>
    <MudText Typo="@Typo.body1" Align="@Align.Center">
        During my 4+ years of Unreal Engine experience as an indie, I have fallen in love with creating modular designs to make it fun to put together video games.
    </MudText>
    <MudText Typo="@Typo.body1" Align="@Align.Center">
        <br>
    </MudText>
    <MudText Typo="@Typo.body1" Align="@Align.Center">
        Throughout my journey, I've pursued the dream of forming a framework for bringing all game ideas to life. This framework consists of four main plugins - GameCore, AbilitySystemSetup, InputSetup, and AnimationSetup. Shared and developed across three different game projects - GameTemplate, ShooterTest, and NinjaGame - my plugins are regularaly tested in unique scenarios.
    </MudText>
    <MudText Typo="@Typo.body1" Align="@Align.Center">
        <br>
    </MudText>
    <MudText Typo="@Typo.body1" Align="@Align.Center">
        Along with building custom systems, I am experienced in integrating third-party plugins. ShooterTest uses the ArcInventory plugin developed by Puny Human. To fit ArcInventory to my needs, I developed additional features in an ArcInventoryExtension plugin such as proper AttributeSet initialization via GameplayEffect.
    </MudText>
    <MudText Typo="@Typo.body1" Align="@Align.Center">
        <br>
    </MudText>
    <MudText Typo="@Typo.body1" Align="@Align.Center">
        I'm excited to share my skills, learn new things, and meet new people along the way!
    </MudText>
    <CHPortfolioSection Title="Contact Me" />
    <MudGrid>
        <MudItem sm="4">
            <div class="d-flex flex-row justify-center align-center">
                <MudIcon Icon="@Icons.Material.Filled.Email" Size="@Size.Large" Color="@Color.Secondary" />
                <div style="width: 10px;"></div>
                <MudLink Href="mailto:christianhinko@gmail.com" Target="_blank" Underline="@Underline.Always" Color="@Color.Secondary">
                    <MudText Typo="@Typo.h6">
                        christianhinko@gmail.com
                    </MudText>
                </MudLink>
            </div>
        </MudItem>
        <MudItem sm="4">
            <div class="d-flex flex-row justify-center align-center">
                <MudIcon Icon="@Icons.Custom.Brands.LinkedIn" Size="@Size.Large" Color="@Color.Secondary" />
                <div style="width: 10px;"></div>
                <MudLink Href="https://www.linkedin.com/in/christianhinko/" Target="_blank" Underline="@Underline.Always" Color="@Color.Secondary">
                    <MudText Typo="@Typo.h6">
                        in/christianhinko
                    </MudText>
                </MudLink>
            </div>
        </MudItem>
        <MudItem sm="4">
            <div class="d-flex flex-row justify-center align-center">
                <MudIcon Icon="@Icons.Custom.Brands.GitHub" Size="@Size.Large" Color="@Color.Secondary" />
                <div style="width: 10px;"></div>
                <MudLink Href="https://github.com/ChristianHinko" Target="_blank" Underline="@Underline.Always" Color="@Color.Secondary">
                    <MudText Typo="@Typo.h6">
                        ChristianHinko
                    </MudText>
                </MudLink>
            </div>
        </MudItem>
    </MudGrid>
</MudContainer>

@page "/games"
@using ChristianHinko.Shared.Components.Portfolio
@using ChristianHinko.Shared.Components.Dailymotion

<!-- Title banner -->
<div class="relative mud-width-full" style="height: 600px; overflow: hidden;">
    <!-- Background video detached from the DOM -->
    <div class="absolute mud-width-full" style="z-index: -100; top: 50%; transform: translateY(-50%);"> <!-- vertically center ourselves -->
        <div style="filter: opacity(0.2);">
            <div class="mud-width-full" style="aspect-ratio: 16 / 9;"> <!-- wrap the video in a 16:9 block with full width -->
                <CHDailymotionPlayerEmbed PlayerId="xdvwm" VideoId="x8jecvv" />
            </div>
        </div>
    </div>
    <!-- Title text on top of the detached background -->
    <div class="relative mud-width-full mud-height-full d-flex flex-column justify-center align-center"> <!-- position has to be non-static in order to draw on top of the non-static-positioned background -->
        <header>
            <MudText Class="ch-header-text" Typo="@Typo.h1" Align="@Align.Center">
                Games
            </MudText>
        </header>
        <MudButton Href="/games/resume" Target="_blank" DisableElevation="true" Variant="@Variant.Outlined">
            <MudText Typo="@Typo.body1">
                Résumé
            </MudText>
        </MudButton>
    </div>
</div>
<!-- Content -->
<MudContainer MaxWidth="@MaxWidth.Large">
    <CHPortfolioSection Title="Plugins Showcase" />
    <MudStack Class="my-10" Row="false" Spacing="16">
        <CHPortfolioProjectCard Id="animation-setup" Title="Animation Setup" TeamSize="1" DevelopmentTime="7 Months" ProjectStatus="In Development" ProjectHref="https://github.com/ChristianHinko/AnimationSetup">
            <Media>
                <MudImage Class="mud-width-full mud-height-full" Src="/_content/ChristianHinko/images/SkinlessSkeletalMesh.png" ObjectFit="@ObjectFit.Cover" />
            </Media>
            <Description>
                <MudText Typo="@Typo.body1">
                    The Animation Setup plugin provides tools for modular character assembly and common mesh setup.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The skinless Skeletal Mesh system generates an animated skeleton that serves as the foundation for modular attachments. This separation of responsibilities allows skeletal animation to be independent of Skeletal Meshes.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The portrayal system creates a workflow for representing an Actor Component in unique ways for different viewers. Portrayals are implemented via a PortrayalDefinition and are identified by Gameplay Tag. Actors can associate their different components with different portrayal tags.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The NinjaGame project implements a first-person portrayal that the Character views when in first-person; meanwhile, other Actors see the default portrayal.
                </MudText>
            </Description>
            <Contributions>
                <MudText Typo="@Typo.body1">
                    <CHTextBullet IndentationLevel="1" />Make skinless Skeletal Mesh generation functionality for creating animated skeletons
                </MudText>
                <MudText Typo="@Typo.body1">
                    <CHTextBullet IndentationLevel="1" />Make PortrayalDefinition for defining how viewers are included and excluded from viewing
                </MudText>
                <MudText Typo="@Typo.body1">
                    <CHTextBullet IndentationLevel="1" />Make ObjectReferenceLibrary subsystem for identifying PortrayalDefinitions by Gameplay Tag
                </MudText>
                <MudText Typo="@Typo.body1">
                    <CHTextBullet IndentationLevel="1" />Make general-purpose Primitive Scene Proxy implementations
                </MudText>
            </Contributions>
        </CHPortfolioProjectCard>
        <CHPortfolioProjectCard Id="custom-collision-queries" Title="Custom Collision Queries" TeamSize="2" DevelopmentTime="2 Months" ProjectStatus="Finished" ProjectHref="https://github.com/b2hinkle/GameCore/tree/master/Source/GameCore/Public/BlueprintFunctionLibraries/CollisionQuery">
            <Media>
                <CHDailymotionPlayerBlock Class="mud-width-full mud-height-full" PlayerId="xdvwm" VideoId="x8i0xvw" FitHeight="true" Link="true" />
            </Media>
            <Description>
                <MudText Typo="@Typo.body1">
                    These custom collision query functions are made using a layered approach where each one implements its own feature and builds off of others.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    These queries combined give us exit hits, can penetrate blocking hits, can ricochet, and can run out of strength. This is a powerful query that is useful for complex shooting systems in games.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The ShooterTest game project uses this and has bullet damage determined by the query strength. ShooterTest also uses physical materials to determine how much strength to nerf and which surfaces are ricochetable.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    All collision queries are generic to both line traces and shape sweeps.
                </MudText>
            </Description>
            <Contributions>
                <MudText Typo="@Typo.body1">
                    <CHTextBullet IndentationLevel="1" />Make method for penetrating any hit while preserving the desired hit responses
                </MudText>
                <MudText Typo="@Typo.body1">
                    <CHTextBullet IndentationLevel="1" />Make function for modifying Hit Result trace data
                </MudText>
                <MudText Typo="@Typo.body1">
                    <CHTextBullet IndentationLevel="1" />Optimize backwards query distance required for exit hits, reducing up to 50% of function time
                </MudText>
                <MudText Typo="@Typo.body1">
                    <CHTextBullet IndentationLevel="1" />Develop function for ordering entrance and exit Hit Results to the query's forwards direction
                </MudText>
                <MudText Typo="@Typo.body1">
                    <CHTextBullet IndentationLevel="1" />Develop query that can lose strength based on distances between entrance and exit Hit Results
                </MudText>
            </Contributions>
        </CHPortfolioProjectCard>
        <CHPortfolioProjectCard Id="ability-system-setup" Title="Ability System Setup" TeamSize="2" DevelopmentTime="2 Years" ProjectStatus="Finished" ProjectHref="https://github.com/ChristianHinko/AbilitySystemSetup">
            <Media>
                <CHDailymotionPlayerBlock Class="mud-width-full mud-height-full" PlayerId="xdvwm" VideoId="x8i0ylk" FitHeight="true" Link="true" />
            </Media>
            <Description>
                <MudText Typo="@Typo.body1">
                    This plugin is an extension of Epic Games' Gameplay Ability System offering an efficient workflow that eliminates boilerplate code and improves scalability.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    This plugin provides a setup for Avatar Actors, a better workflow for Gameplay Ability input binding, and many other tools to aid in using the ability system.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The AvatarActorExtension component initializes and uninitializes an Avatar Actor when provided with an Ability System Component and optional AbilitySets. It is agnostic to Ability System Component location and supports Avatar Actors of any type.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    For Pawns, the more specialized PawnAvatarActorExtension component provides additional logic for ability input binding. This makes a complete in-editor workflow for associating Gameplay Abilities with Input Actions via Gameplay Tags.
                </MudText>
            </Description>
            <Contributions>
                <MudText Typo="@Typo.body1">
                    <CHTextBullet IndentationLevel="1" />Develop common initialization and uninitialization for Ability System Component with Avatar Actor
                </MudText>
                <MudText Typo="@Typo.body1">
                    <CHTextBullet IndentationLevel="1" />Develop Gameplay Tag workflow for associating Input Actions with Gameplay Abilities
                </MudText>
                <MudText Typo="@Typo.body1">
                    <CHTextBullet IndentationLevel="1" />Make granting and removing of Ability Sets
                </MudText>
                <MudText Typo="@Typo.body1">
                    <CHTextBullet IndentationLevel="1" />Make a way to reuse Target Actors through several Ability Task usages
                </MudText>
                <MudText Typo="@Typo.body1">
                    <CHTextBullet IndentationLevel="1" />Make custom Gameplay Target Data Filters
                </MudText>
            </Contributions>
        </CHPortfolioProjectCard>
        <CHPortfolioProjectCard Id="input-setup" Title="Input Setup" TeamSize="2" DevelopmentTime="1 Month" ProjectStatus="Finished" ProjectHref="https://github.com/ChristianHinko/InputSetup">
            <Media>
                <CHDailymotionPlayerBlock Class="mud-width-full mud-height-full" PlayerId="xdvwm" VideoId="x8i0zfz" FitHeight="true" Link="true" />
            </Media>
            <Description>
                <MudText Typo="@Typo.body1">
                    The Input Setup plugin is a central place where all Input Actions in the game can be accessed from.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    Input Action references are stored on an Engine Subsystem and identifiable by Gameplay Tags, allowing different game systems to use the same Input Actions without creating duplicate references.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The game project can add Input Actions to the subsystem via project settings. External plugins are able to contribute via a Data Asset that is loaded by the subsystem. Contributions from dynamically-loaded plugins, e.g., Game Features, are supported as well.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The Ability System Setup plugin uses this subsystem to execute input events for relevant Gameplay Abilities of the Input Actions.
                </MudText>
            </Description>
            <Contributions>
                <MudText Typo="@Typo.body1">
                    <CHTextBullet IndentationLevel="1" />Develop subsystem gathering Input Action references from game project and dynamic plugins
                </MudText>
            </Contributions>
        </CHPortfolioProjectCard>
        <CHPortfolioProjectCard Id="property-wrapper" Title="Property Wrapper" TeamSize="2" DevelopmentTime="16 Months" ProjectStatus="Finished" ProjectHref="https://github.com/b2hinkle/GameCore/tree/master/Source/GameCore/Public/Types/PropertyWrappers">
            <Media>
                <CHDailymotionPlayerBlock Class="mud-width-full mud-height-full" PlayerId="xdvwm" VideoId="x8i0yuv" FitHeight="true" Link="true" />
            </Media>
            <Description>
                <MudText Typo="@Typo.body1">
                    Using a property wrapper gives you an event to use for when the value of the property has been changed.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The original motivation behind the property wrapper was to provide a streamlined workflow for Push Model replication.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The property wrapper's functionality is generic to any type. It is implemented as a lightweight USTRUCT with most functionality in a base class and boilerplate code in a macro.
                </MudText>
            </Description>
            <Contributions>
                <MudText Typo="@Typo.body1">
                    <CHTextBullet IndentationLevel="1" />Develop usage of FProperty pointers for Push Model replication and generic serialization
                </MudText>
            </Contributions>
        </CHPortfolioProjectCard>
    </MudStack>
    <CHPortfolioSection Title="My Story" />
    <MudText Typo="@Typo.body1" Align="@Align.Center">
        Hi! My name is Christian Hinkle. I am a multiplayer game systems programmer.
    </MudText>
    <MudText Typo="@Typo.body1" Align="@Align.Center">
        <br>
    </MudText>
    <MudText Typo="@Typo.body1" Align="@Align.Center">
        During my 4+ years of Unreal Engine experience as an indie, I have fallen in love with creating modular designs to make it fun to put together video games.
    </MudText>
    <CHPortfolioSection Title="Contact Me" />
    <MudGrid>
        <MudItem sm="4">
            <div class="d-flex flex-row justify-center align-center">
                <MudIcon Icon="@Icons.Material.Filled.Email" Size="@Size.Large" Color="@Color.Secondary" />
                <div style="width: 10px;"></div>
                <MudLink Href="mailto:christianhinko@gmail.com" Target="_blank" Underline="@Underline.Always" Color="@Color.Secondary">
                    <MudText Typo="@Typo.h6">
                        christianhinko@gmail.com
                    </MudText>
                </MudLink>
            </div>
        </MudItem>
        <MudItem sm="4">
            <div class="d-flex flex-row justify-center align-center">
                <MudIcon Icon="@Icons.Custom.Brands.LinkedIn" Size="@Size.Large" Color="@Color.Secondary" />
                <div style="width: 10px;"></div>
                <MudLink Href="https://www.linkedin.com/in/christianhinko/" Target="_blank" Underline="@Underline.Always" Color="@Color.Secondary">
                    <MudText Typo="@Typo.h6">
                        christianhinko
                    </MudText>
                </MudLink>
            </div>
        </MudItem>
        <MudItem sm="4">
            <div class="d-flex flex-row justify-center align-center">
                <MudIcon Icon="@Icons.Custom.Brands.GitHub" Size="@Size.Large" Color="@Color.Secondary" />
                <div style="width: 10px;"></div>
                <MudLink Href="https://github.com/ChristianHinko" Target="_blank" Underline="@Underline.Always" Color="@Color.Secondary">
                    <MudText Typo="@Typo.h6">
                        ChristianHinko
                    </MudText>
                </MudLink>
            </div>
        </MudItem>
    </MudGrid>
</MudContainer>

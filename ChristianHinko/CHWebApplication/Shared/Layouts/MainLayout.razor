@inherits LayoutComponentBase
@using Services
@inject CHLayoutService LayoutService;
@implements IDisposable

<MudRTLProvider RightToLeft="@LayoutService.RightToLeft"> <!-- hook up our LayoutService layout to the MudRTLProvider -->
    <MudThemeProvider @ref="@ThemeProvider" Theme="@LayoutService.Theme" DefaultScrollbar="@LayoutService.DefaultScrollbar" IsDarkMode="@LayoutService.IsDarkMode" IsDarkModeChanged="@LayoutService.SetIsDarkMode" /> <!-- hook up our LayoutService's theming to the MudThemeProvider -->
    <MudDialogProvider />
    <MudSnackbarProvider />
    @Body
</MudRTLProvider>

@code
{
    private MudThemeProvider ThemeProvider { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            // Use system preference for default IsDarkMode value
            bool darkMode = await ThemeProvider.GetSystemPreference();
            LayoutService.SetIsDarkMode(darkMode);
        }
    }

    protected override void OnInitialized()
    {
        // Listen for layout changes
        LayoutService.LayoutChanged += OnLayoutChanged;
        base.OnInitialized();
    }

    private void OnLayoutChanged(object? sender, EventArgs e) => StateHasChanged(); // re-render from layout change

    public void Dispose()
    {
        // Unbind from layout changes
        LayoutService.LayoutChanged -= OnLayoutChanged;
    }
}

@page "/games"

<!-- Title banner -->
<div class="relative mud-width-full" style="height: 500px;">
    <!-- Carousel background detached from the DOM -->
    <MudCarousel Class="absolute mud-width-full mud-height-full" TData="object" AutoCycle="true" AutoCycleTime="@TimeSpan.FromSeconds(3)" ShowArrows="false" ShowBullets="false">
        <MudCarouselItem Class="mud-width-full mud-height-full" Transition="@CarouselItemTransition" Color="@Color.Primary" />
        <MudCarouselItem Class="mud-width-full mud-height-full" Transition="@CarouselItemTransition" Color="@Color.Secondary" />
        <MudCarouselItem Class="mud-width-full mud-height-full" Transition="@CarouselItemTransition" Color="@Color.Tertiary" />
    </MudCarousel>
    <!-- Title text on top of the detached background -->
    <div class="relative mud-width-full mud-height-full d-flex justify-center align-center"> <!-- position has to be non-static in order to draw over the non-static-positioned mud carousel elements -->
        <header>
            <MudText Class="ch-header-text" Typo="@Typo.h1" Align="@Align.Center">
                Games
            </MudText>
        </header>
    </div>
</div>
<!-- Content -->
<MudContainer MaxWidth="@MaxWidth.Large">
    <div class="my-16">
        <MudText Typo="@Typo.h2" Align="@Align.Center">
            Plugins Showcase
        </MudText>
    </div>
    <MudStack Class="my-10" Row="false" Spacing="16">
        <CHPortfolioProjectCard Id="animation-setup" Title="Animation Setup" TeamSize="1" DevelopmentTime="6 Months" ProjectStatus="In Development" ProjectHref="https://github.com/ChristianHinko/AnimationSetup">
            <Description>
                <MudText Typo="@Typo.body1">
                    The Animation Setup plugin provides tools for putting together modular characters and performing common character mesh setup.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The skinless Skeletal Mesh system generates an animated skeleton that serves as the foundation for attaching modular character parts. The attached meshes may copy the animation, e.g., a character's arm moving, while others may perform their own animation, e.g., a character's gun shooting. This separation allows skeletal animation to be independent of Skeletal Meshes.
                </MudText>
            </Description>
            <Contributions>
                <MudText Typo="@Typo.body1">
                    • Make skinless Skeletal Mesh generation function
                </MudText>
                <MudText Typo="@Typo.body1">
                    • Make skinless Skeletal Mesh component
                </MudText>
                <MudText Typo="@Typo.body1">
                    • Make attachment attacher component
                </MudText>
            </Contributions>
        </CHPortfolioProjectCard>
        <CHPortfolioProjectCard Id="custom-collision-queries" Title="Custom Collision Queries" TeamSize="2" DevelopmentTime="2 Months" ProjectStatus="Finished" ProjectHref="https://github.com/b2hinkle/GameCore/tree/master/Source/GameCore/Public/BlueprintFunctionLibraries/CollisionQuery">
            <Description>
                <MudText Typo="@Typo.body1">
                    These custom collision query functions are made using a layered approach where each one implements its own feature and builds off of others.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    These queries combined give us exit hits, can penetrate blocking hits, can ricochet, and can run out of strength. This is a powerful query that is useful for complex shooting systems in games.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The ShooterTest game project uses this and has bullet damage determined by the query strength. ShooterTest also uses physical materials to determine how much strength to nerf and which surfaces are ricochetable.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    All collision queries are generic to both line traces and shape sweeps.
                </MudText>
            </Description>
            <Contributions>
                <MudText Typo="@Typo.body1">
                </MudText>
            </Contributions>
        </CHPortfolioProjectCard>
        <CHPortfolioProjectCard Id="ability-system-setup" Title="Ability System Setup" TeamSize="2" DevelopmentTime="2 Years" ProjectStatus="Finished" ProjectHref="https://github.com/ChristianHinko/AbilitySystemSetup">
            <Description>
                <MudText Typo="@Typo.body1">
                    This plugin is an extension of Epic Games' Gameplay Ability System offering an efficient workflow that eliminates boilerplate code and improves scalability.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    This plugin provides a setup for Avatar Actors, a better workflow for Gameplay Ability input binding, and many other tools to aid in using the ability system.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The AvatarActorExtension component initializes and uninitializes an Avatar Actor when provided with an Ability System Component and optional AbilitySets. It is agnostic to Ability System Component location and supports Avatar Actors of any type.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    For Pawns, the more specialized PawnAvatarActorExtension component provides additional logic for ability input binding. This makes a complete in-editor workflow for associating Gameplay Abilities with Input Actions via Gameplay Tags.
                </MudText>
            </Description>
            <Contributions>
                <MudText Typo="@Typo.body1">
                </MudText>
            </Contributions>
        </CHPortfolioProjectCard>
        <CHPortfolioProjectCard Id="input-setup" Title="Input Setup" TeamSize="2" DevelopmentTime="1 Month" ProjectStatus="Finished" ProjectHref="https://github.com/ChristianHinko/InputSetup">
            <Description>
                <MudText Typo="@Typo.body1">
                    The Input Setup plugin is a central place where all Input Actions in the game can be accessed from.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    Input Action references are stored on an Engine Subsystem and identifiable by Gameplay Tags, allowing different game systems to use the same Input Actions without creating duplicate references.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The game project can add Input Actions to the subsystem via project settings. External plugins are able to contribute via a Data Asset that is loaded by the subsystem. Contributions from dynamically-loaded plugins, e.g., Game Features, are supported as well.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The Ability System Setup plugin uses this subsystem to execute input events for relevant Gameplay Abilities of the Input Actions.
                </MudText>
            </Description>
            <Contributions>
                <MudText Typo="@Typo.body1">
                </MudText>
            </Contributions>
        </CHPortfolioProjectCard>
        <CHPortfolioProjectCard Id="property-wrapper" Title="Property Wrapper" TeamSize="2" DevelopmentTime="16 Months" ProjectStatus="Finished" ProjectHref="https://github.com/b2hinkle/GameCore/tree/master/Source/GameCore/Public/Types/PropertyWrappers">
            <Description>
                <MudText Typo="@Typo.body1">
                    Using a property wrapper gives you an event to use for when the value of the property has been changed.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The original motivation behind the property wrapper was to provide a streamlined workflow for Push Model replication.
                </MudText>
                <MudText Typo="@Typo.body1">
                    <br>
                </MudText>
                <MudText Typo="@Typo.body1">
                    The property wrapper's functionality is generic to any type. It is implemented as a lightweight USTRUCT with most functionality in a base class and boilerplate code in a macro.
                </MudText>
            </Description>
            <Contributions>
                <MudText Typo="@Typo.body1">
                </MudText>
            </Contributions>
        </CHPortfolioProjectCard>
    </MudStack>
</MudContainer>

@code
{
    private Transition CarouselItemTransition { get; set; } = Transition.Slide;
}
